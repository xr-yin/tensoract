"""This module demonstrates the Frobenius norm errors in our LPTN simulations converge quadratically with time step size O(dt^2) in 
the presence of Strang splitting. 

The first two models we study are the edge-driving Heisenberg XXZ chain and the dissipative-driven Bose Hubburd chain. The former have 
only non-trivial Krauss dimension at the first and last site of the chain, as a result of having local dissipators only at the two edges. 
The latter, on the other hand, have local dissipator acting on every site. They both show that the Frobenius norm errors produced by our
tensor network approach converge in the second order of time step.

In addition, we simulate a transverse ising model without any quantum channels to show the algorithm reduces to TEBD2. For completion, we
also simulate a toy model with random dissipators and trivial coherent dynamics to study the errors generated by the dissipative layer alone.
"""

import torch
import matplotlib.pyplot as plt
from scipy.sparse.linalg import expm_multiply

import os
import sys
import time
import logging
from copy import deepcopy
logging.basicConfig(level=logging.WARNING)

tensoractpath = os.path.dirname(os.path.abspath(os.getcwd()))
sys.path.append(os.path.join(tensoractpath, "tensoract"))

from tensoract.core.lptn import LPTN
from tensoract.models.spin_chains import Heisenberg, TransverseIsing, dissipative_testmodel
from tensoract.models.boson_chains import DDBH
from tensoract.solvers.evolution import LindbladOneSite

def XXZ(N: int, tmax: float, dt_list: list, dtype: torch.dtype, device: torch.device):
    """we use the Heisenberg XXZ model to test if our simulation method exhibit quadratic errors

    Parameters
    ----------
    N : int
        system size
    tmax : float
        total time for simulation
    dt_list : list
        list of time steps
    dtype : torch.dtype
        data type for tensors
    device : torch.device
        device for tensors ('cpu' or 'cuda')

    Remarks
    ----------
    The full Liouvillian matrix has a size of n^2 x n^2, which requires a lot of computer memory if 
    system size is large, which is why we need tensor network methods for simulation.
    The quadratic error scaling can be violated if the bond dimensions are chosen too small due to the
    accumulated dicard of weights. Therefore, it is worthwhile to pick the parameters (bond dimensions, 
    time step) to balance the trotter errors and the discarded weights.
    """

    X = LPTN.gen_polarized_spin_chain(N, '+x', dtype=dtype, device=device)

    err_t = torch.zeros(len(dt_list))
    time_t = torch.zeros(len(dt_list))
    model = Heisenberg(N, (1., 1., 0.5), 0., 1.)

    Xt_ref = expm_multiply(tmax * model.Liouvillian, X.to_density_matrix().ravel().numpy())

    # convergence plots
    fig, (ax1,ax2) = plt.subplots(1,2, figsize=(9,5))
    fig.suptitle('Strang splitting of Liouville operator')

    for bd,kd in [(15,15), (15,20), (20,15), (20,20)]:
        for n, dt in enumerate(dt_list):

            torch.cuda.empty_cache()

            psi = deepcopy(X)
            lab = LindbladOneSite(psi, model)
            Nsteps = round(tmax / dt)
            print(f"Nsteps={Nsteps}")
            start = time.time()
            lab.run(Nsteps, dt, bd, kd)
            time_t[n] = time.time() - start
            # record error
            err_t[n] = torch.linalg.norm(psi.to_density_matrix().ravel() - Xt_ref)
            print('trace:', torch.trace(psi.to_density_matrix()))

        print('errors:', err_t)
        ax1.loglog(dt_list, err_t, 'o-', label=f'bd={bd},kd={kd}')
        ax2.plot(dt_list, time_t, 'x-', label=f'bd={bd},kd={kd}')

    ax1.plot(dt_list, torch.tensor(dt_list)**2, '--', label=r'$\delta t^2$') # second order in dt
    ax1.set_xlabel(r"$\delta t$")
    ax1.set_ylabel("errors")
    ax1.set_title(f'XXZ model simulation up to t={tmax}')

    ax2.set_ylabel("execution times (s)")
    ax2.set_yscale('log')

    ax1.legend()
    ax2.legend()

    fig.tight_layout()
    plt.savefig('xxz_converge.pdf')

def BoseHubbardRun(N: int, d: int, tmax: float, dt_list: list, dtype: torch.dtype, device: torch.device):
    """we use the dissipative Bose Hubburd model to test if our simulation method exhibit quadratic errors

    Parameters
    ----------
    N : int
        system size
    tmax : float
        total time for simulation
    dt_list : list
        list of time steps
    dtype : torch.dtype
        data type for tensors
    device : torch.device
        device for tensors ('cpu' or 'cuda')
    """
    # initialize a vaccum state
    A = torch.zeros([1,1,d,1], dtype=torch.complex128, device='cpu')
    A[0,0,0,0] = 1.
    X = LPTN([A.clone() for _ in N])
    print('trace at t=0:', torch.trace(X.to_density_matrix()))

    err_t = torch.zeros(len(dt_list))
    time_t = torch.zeros(len(dt_list))
    model = DDBH(N, d, t=.2, U=1., mu=0.3, F=.25, gamma=0.3)

    Xt_ref = expm_multiply(tmax * model.Liouvillian, X.to_density_matrix().ravel().numpy())
    Xt_ref = torch.from_numpy(Xt_ref)   # always keep on the CPU

    X.to(device, dtype=dtype)
    # convergence plots
    fig, (ax1,ax2) = plt.subplots(1,2, figsize=(9,5))
    fig.suptitle('Strang splitting of Liouville operator')

    for bd,kd in [(10,4), (10,3)]:
        for n, dt in enumerate(dt_list):
            torch.cuda.empty_cache()
            psi = deepcopy(X)
            lab = LindbladOneSite(psi, model)
            Nsteps = round(tmax / dt)
            print(f"Nsteps={Nsteps}")
            start = time.time()
            lab.run(Nsteps, dt, bd, kd)
            time_t[n] = time.time() - start
            # record error
            err_t[n] = torch.linalg.norm(psi.to_density_matrix().ravel().cpu() - Xt_ref)
            logging.info(f'trace={torch.trace(psi.to_density_matrix())}')

        print(f'bd={psi.bond_dims}, kd_max={psi.krauss_dims}')
        print('errors:', err_t)
        ax1.loglog(dt_list, err_t, 'o-', label=f'bd={bd},kd={kd}')
        ax2.plot(dt_list, time_t, 'x-', label=f'bd={bd},kd={kd}')

    ax1.plot(dt_list, 0.5*torch.tensor(dt_list)**2, '--', label=r"$\delta t^2$") # second order in dt
    ax1.set_xlabel(r'$\delta t$')
    ax1.set_ylabel("errors")
    ax1.set_title(f'Bose Hubbard simulation up to t={tmax}')

    ax2.set_ylabel("execution times (s)")
    ax2.set_yscale('log')

    ax1.legend()
    ax2.legend()

    plt.savefig('DDBH_converge.pdf')

def tfi_coherent():
    """errors from the coherent layer alone
    the LindbladOneSite() will reduce to a second order TEBD in absense of dissipators"""

    N = 12
    tmax = 2.

    dt_list = [0.5**k for k in range(6)]  # hence the total time steps = 2**k
    err_t = torch.zeros(len(dt_list))

    model = TransverseIsing(N, g=1.5)

    rho = LPTN.gen_polarized_spin_chain(N, '+z')
    # reference time-evolved state
    U = torch.linalg.matrix_exp(torch.from_numpy(-1j * tmax * model.H_full.toarray()))

    rhot_ref = U @ rho.to_density_matrix() @ U.adjoint()

    for n, dt in enumerate(dt_list):

        psi = LPTN.gen_polarized_spin_chain(N, '+z')
        lab = LindbladOneSite(psi, model)

        Nsteps = round(tmax / dt)
        logging.info(f"Nsteps={Nsteps}")

        lab.run(Nsteps, dt, m_max=25, k_max=5)
        print(psi.bond_dims)
        print(psi.krauss_dims)

        # record error
        err_t[n] = torch.linalg.norm(psi.to_density_matrix() - rhot_ref)

    print(err_t)
    plt.loglog(dt_list, err_t, 'o-', label='variational')
    plt.loglog(dt_list, torch.tensor(dt_list)**2, '--', label=r'$\delta t^2$') # second order in dt
    plt.xlabel(r'$\delta t$')
    plt.ylabel('errors')
    plt.legend()

    plt.savefig('tfi_coherent')
    
def dissipative_dynamics():
    """errors from the dissipative layer alone

    Since no two-qubit gates from the unitary time evolution are present, the bond 
    dimensions stay strictly the same. The SVD along the Kraus bond is truncation-free, 
    so long as the k_max is greater than mL*d*mR. This is easy to satisfy if we start 
    with a product state, in this case, the error should be close to the machine error.
    """
    
    N = 7
    tmax = 1.

    dt_list = [0.5**k for k in range(5)]  # hence the total time steps = 2**k
    err_t = torch.zeros(len(dt_list))

    model = dissipative_testmodel(N)

    x = LPTN.gen_random_state(N, m_max=10, k_max=10, phy_dims=[2]*N)
    x.orthonormalize('right')
    x.orthonormalize('left')
    print('bond dimensions at start:', x.bond_dims)
    print('Kraus dimensions at start:', x.krauss_dims)
    # reference time-evolved state
    xt_ref = expm_multiply(tmax * model.Liouvillian(model.H_full, *model.L_full), x.to_density_matrix().ravel())

    for n, dt in enumerate(dt_list):

        psi = deepcopy(x)
        lab = LindbladOneSite(psi, model)

        Nsteps = round(tmax / dt)
        logging.info(f"Nsteps={Nsteps}")

        lab.run(Nsteps, dt, m_max=15, k_max=15)

        print('bond dimensions at finish:', psi.bond_dims)
        print('Kraus dimensions at finish:', psi.krauss_dims)

        # record error
        err_t[n] = torch.linalg.norm(psi.to_density_matrix().ravel() - xt_ref)

    print(err_t)
    plt.loglog(dt_list, err_t, 'o-', label='variational')
    plt.xlabel(r'$\delta t$')
    plt.ylabel('errors')
    plt.legend()
    plt.tight_layout()
    plt.savefig('random_dissipative')

if __name__ == '__main__': 

    tmax = float(input('simulation time:') or 2.)
    num_intervals = int(input('number of time intervals:') or 4)

    # the total time steps = 2**k
    dt_list = [0.5**k for k in range(num_intervals+1)]

    XXZ(8, tmax, dt_list, torch.complex128, 'cpu')